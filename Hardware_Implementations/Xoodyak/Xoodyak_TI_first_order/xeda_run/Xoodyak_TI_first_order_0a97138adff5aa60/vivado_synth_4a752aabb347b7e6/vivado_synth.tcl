# Auto-generated by Xeda

create_project -part xc7a200tfbg484-3 -force -verbose Xoodyak_TI_first_order

set design_name           Xoodyak_TI_first_order
set vhdl_std              08

proc reportCriticalPaths { fileName } {
    # Open the specified output file in write mode
    set FH [open $fileName w]
    # Write the current date and CSV format to a file header
    puts $FH "#\n# File created on [clock format [clock seconds]]\n#\n"
    puts $FH "Startpoint,Endpoint,DelayType,Slack,#Levels,#LUTs"
    # Iterate through both Min and Max delay types
    foreach delayType {max min} {
        # Collect details from the 50 worst timing paths for the current analysis
        # (max = setup/recovery, min = hold/removal)
        # The $path variable contains a Timing Path object.
        foreach path [get_timing_paths -delay_type $delayType -max_paths 50 -nworst 1] {
            # Get the LUT cells of the timing paths
            # set luts [get_cells -filter {REF_NAME =~ LUT*} -of_object $path] # print  ,[llength $luts] << TODO warnings
            # Get the startpoint of the Timing Path object
            set startpoint [get_property STARTPOINT_PIN $path]
            # Get the endpoint of the Timing Path object
            set endpoint [get_property ENDPOINT_PIN $path]
            # Get the slack on the Timing Path object
            set slack [get_property SLACK $path]
            # Get the number of logic levels between startpoint and endpoint
            set levels [get_property LOGIC_LEVELS $path]
            # Save the collected path details to the CSV file
            puts $FH "$startpoint,$endpoint,$delayType,$slack,$levels"
        }
    }
    # Close the output file
    close $FH
    puts "CSV file $fileName has been created.\n"
    return 0
}; # End PROC


proc showWarningsAndErrors {} {
  set num_errors     [get_msg_config -severity {ERROR} -count]
  set num_crit_warns [get_msg_config -severity {CRITICAL WARNING} -count]
  set num_warns      [get_msg_config -severity {WARNING} -count]

  if {$num_errors > 0} {
    puts "Exiting Vivado due to $num_errors error(s)!"
    exit 1
  }

  if {$num_crit_warns > 0} {
    puts "\n===========================( *ENABLE ECHO* )==========================="
    puts "** Number of Critical Warnings:  $num_crit_warns"
    
    puts "\n===========================( *DISABLE ECHO* )==========================="
  }

  if {$num_warns > 0} {
    puts "** Number of Warnings:           $num_warns"
  }

  puts "\n"
}


set_param general.maxThreads 12

puts "\n=====================( Read Design Files and Constraints )====================="

puts "Reading VHDL file /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/LWC_config.vhd"
if { [catch {eval read_vhdl  -vhdl2008 /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/LWC_config.vhd } myError]} {
    errorExit $myError
}
puts "Reading VHDL file /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/LWC/NIST_LWAPI_pkg.vhd"
if { [catch {eval read_vhdl  -vhdl2008 /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/LWC/NIST_LWAPI_pkg.vhd } myError]} {
    errorExit $myError
}
puts "Reading VHDL file /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/design_pkg.vhd"
if { [catch {eval read_vhdl  -vhdl2008 /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/design_pkg.vhd } myError]} {
    errorExit $myError
}
puts "Reading VHDL file /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/xoodoo_globals.vhd"
if { [catch {eval read_vhdl  -vhdl2008 /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/xoodoo_globals.vhd } myError]} {
    errorExit $myError
}
puts "Reading Verilog file /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/xoodoo_n_rounds_SCA.v"
if { [catch {eval read_verilog /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/xoodoo_n_rounds_SCA.v } myError]} {
    errorExit $myError
}
puts "Reading Verilog file /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/xoodoo_register_SCA.v"
if { [catch {eval read_verilog /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/xoodoo_register_SCA.v } myError]} {
    errorExit $myError
}
puts "Reading Verilog file /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/xoodoo_round_SCA.v"
if { [catch {eval read_verilog /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/xoodoo_round_SCA.v } myError]} {
    errorExit $myError
}
puts "Reading Verilog file /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/xoodoo_SCA.v"
if { [catch {eval read_verilog /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/xoodoo_SCA.v } myError]} {
    errorExit $myError
}
puts "Reading VHDL file /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/CryptoCore_SCA.vhd"
if { [catch {eval read_vhdl  -vhdl2008 /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/CryptoCore_SCA.vhd } myError]} {
    errorExit $myError
}
puts "Reading VHDL file /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/LWC/data_piso.vhd"
if { [catch {eval read_vhdl  -vhdl2008 /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/LWC/data_piso.vhd } myError]} {
    errorExit $myError
}
puts "Reading VHDL file /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/LWC/data_sipo.vhd"
if { [catch {eval read_vhdl  -vhdl2008 /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/LWC/data_sipo.vhd } myError]} {
    errorExit $myError
}
puts "Reading VHDL file /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/LWC/FIFO.vhd"
if { [catch {eval read_vhdl  -vhdl2008 /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/LWC/FIFO.vhd } myError]} {
    errorExit $myError
}
puts "Reading VHDL file /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/LWC/key_piso.vhd"
if { [catch {eval read_vhdl  -vhdl2008 /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/LWC/key_piso.vhd } myError]} {
    errorExit $myError
}
puts "Reading VHDL file /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/LWC/PreProcessor.vhd"
if { [catch {eval read_vhdl  -vhdl2008 /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/LWC/PreProcessor.vhd } myError]} {
    errorExit $myError
}
puts "Reading VHDL file /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/LWC/PostProcessor.vhd"
if { [catch {eval read_vhdl  -vhdl2008 /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/LWC/PostProcessor.vhd } myError]} {
    errorExit $myError
}
puts "Reading VHDL file /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/LWC/LWC_SCA.vhd"
if { [catch {eval read_vhdl  -vhdl2008 /home/luke/GMU/xeda_projects/Xoodyak_HSCPL_CERG_LWC/Hardware_Implementations/Xoodyak/Xoodyak_TI_first_order/src_rtl/LWC/LWC_SCA.vhd } myError]} {
    errorExit $myError
}


read_xdc clock.xdc


set_property top LWC_SCA [get_fileset sources_1]

set avail_synth_strategies [join [list_property_value strategy [get_runs synth_1] ] " "]
puts "available synthesis strategies: $avail_synth_strategies"


puts "setting synthesis strategy to Flow_PerfOptimized_high"
set_property strategy Flow_PerfOptimized_high [get_runs synth_1]



set avail_impl_strategies [join [list_property_value strategy [get_runs impl_1] ] " "]
puts "available implementation strategies: $avail_impl_strategies"

puts "setting implementation strategy to Performance_ExploreWithRemap"
set_property strategy Performance_ExploreWithRemap [get_runs impl_1]
#
#
add_files -fileset utils_1 -norecurse [pwd]/vivado_report_helper.tcl
set_property STEPS.ROUTE_DESIGN.TCL.POST [pwd]/vivado_report_helper.tcl [get_runs impl_1]

create_report_config -report_type report_utilization -report_name post_opt_report        -steps opt_design   -runs [get_runs impl_1] -options {-format xml}
create_report_config -report_type report_utilization -report_name post_opt_hier_report   -steps opt_design   -runs [get_runs impl_1] -options {-hierarchical -format xml}
create_report_config -report_type report_utilization -report_name post_route_report      -steps route_design -runs [get_runs impl_1] -options {-format xml}
create_report_config -report_type report_utilization -report_name post_route_hier_report -steps route_design -runs [get_runs impl_1] -options {-hierarchical -format xml}

puts "\n=============================( Running Synthesis )============================="
launch_runs synth_1 -jobs 12
wait_on_run synth_1
# renamed to wait_on_runs in Vivado 2021.2?!!

puts "\n===========================( Running Implementation )=========================="
launch_runs impl_1 -jobs 12 -to_step route_design
wait_on_run impl_1

puts "\n====================================( DONE )==================================="